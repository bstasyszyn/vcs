// Package spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package spec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/trustbloc/vcs/pkg/restapi/v1/common"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AQA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
